LARACKER_VERSION=2.2.0

SCRIPT=`realpath $0`
SCRIPT_PATH=`dirname $SCRIPT`
export LARACKER_BASE_PATH=`dirname $SCRIPT_PATH`

${SCRIPT_PATH}/aliases

source ${LARACKER_BASE_PATH}/.docker/scripts/common/colors

echo -e "\n${WHITE}Laradhoc ${INFO}${LARACKER_VERSION}${NC}\n" >&2

COMMAND=$1
shift 1

if [ "$COMMAND" == "" ] || [ "$COMMAND" == "help" ] ; then
    ${LARACKER_BASE_PATH}/.docker/scripts/help
    exit 0
fi

# Ensure that Docker is running
if ! docker info > /dev/null 2>&1; then
    echo -e "${ERROR}Docker is not running.${NC}\n" >&2

    exit 1
fi

# Ensure .env has been created
if [ ! -f ${LARACKER_BASE_PATH}/.laradhoc ]; then
    echo -e "${ERROR}.laradhoc not found!${NC}\n" >&2
    exit 1
fi

function join_by { local d=${1-} f=${2-}; if shift 2; then printf %s "$f" "${@/#/$d}"; fi; }

source ${LARACKER_BASE_PATH}/.laradhoc
source ${LARACKER_BASE_PATH}/bin/buildenv

# Ensure containers are running
PSRESULT="$(docker-compose --env-file ${LARACKER_BASE_PATH}/bin/.env --project-directory ${LARACKER_BASE_PATH} -p $CONTAINER_PREFIX ps -q)"
if ! docker-compose --env-file ${LARACKER_BASE_PATH}/bin/.env --project-directory ${LARACKER_BASE_PATH} -p $CONTAINER_PREFIX ps &> /dev/null; then
    EXEC="no"
    elif [ -n "$PSRESULT" ]; then
    EXEC="yes"
else
    EXEC="no"
fi

function check_if_is_running {
    if [ $EXEC == "no" ]; then
        echo -e "${ERROR}Laradhoc is not running.${NC}" >&2
        echo "" >&2
        echo -e "You may start Laradhoc using the following command:${INFO} ./vendor/bin/laradhoc up${NC}\n" >&2
        exit 1
    fi
}

SCRIPTS_DIR=${LARACKER_BASE_PATH}/.docker/scripts/

if [ "$COMMAND" == "init" ]; then
    ${SCRIPTS_DIR}init $@
    elif [ "$COMMAND" == "install" ]; then
    ${SCRIPTS_DIR}install-laravel
    elif [ "$COMMAND" == "build" ]; then
    ${SCRIPTS_DIR}start --build
    elif [ "$COMMAND" == "init-laravel" ]; then
    ${SCRIPTS_DIR}init-laravel
    elif [ "$COMMAND" == "install-laravel" ]; then
    ${SCRIPTS_DIR}install-laravel
    elif [ "$COMMAND" == "up" ] || [ "$COMMAND" == "start" ]; then
    ${SCRIPTS_DIR}start $@
    elif [ "$COMMAND" == "down" ] || [ "$COMMAND" == "stop" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}stop
    elif [ "$COMMAND" == "artisan" ] || [ "$COMMAND" == "art" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}artisan $@
    elif [ "$COMMAND" == "tinker" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}artisan tinker
    elif [ "$COMMAND" == "composer" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}composer $@
    elif [ "$COMMAND" == "test" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}artisan test $@
    elif [ "$COMMAND" == "phpunit" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}phpunit $@
    elif [ "$COMMAND" == "ps" ]; then
    check_if_is_running
    docker-compose \
    --env-file ${LARACKER_BASE_PATH}/bin/.env \
    --project-directory ${LARACKER_BASE_PATH} \
    --project-name "${CONTAINER_PREFIX}" \
    ps
    elif [ "$COMMAND" == "nah" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}nah
    elif [ "$COMMAND" == "node" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}node $@
    elif [ "$COMMAND" == "gulp" ]; then
    check_if_is_running
    ${SCRIPTS_DIR}gulp $@
    elif [ "$COMMAND" == "laravel" ]; then
    check_if_is_running
    docker exec -u 0 -it ${CONTAINER_PREFIX}_laravel $@
else
    echo -e "\n${ERROR}Command '$COMMAND' not defined.${NC}\n"
fi
