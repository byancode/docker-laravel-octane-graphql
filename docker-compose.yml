version: '3.2'
services:
    mysql:
        restart: unless-stopped
        container_name: ${CONTAINER_PREFIX}_mysql
        tty: true
        command:
            [
                '--character-set-server=utf8mb4',
                '--collation-server=utf8mb4_unicode_ci',
                '--default-authentication-plugin=mysql_native_password'
            ]
        build:
            context: ./.docker/images/mysql
            args:
                - MYSQL_IMAGE=${MYSQL_IMAGE}
        environment:
            MYSQL_DATABASE: ${MYSQL_DATABASE}
            MYSQL_USER: ${MYSQL_USER}
            MYSQL_PASSWORD: ${MYSQL_PASSWORD}
            MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
            MYSQL_INITDB_SKIP_TZINFO: 1
        expose:
            - "3306"
        ports:
            - ${MYSQL_PORT:-3306}:3306
        volumes:
            - sql-data:/var/lib/mysql
        depends_on:
            - nginx

    phpmyadmin:
        restart: unless-stopped
        container_name: ${CONTAINER_PREFIX}_phpmyadmin
        build:
            context: ./.docker/images/phpmyadmin
        environment:
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - PMA_HOST=database
            - PMA_PORT=3306
            - PMA_USER=${MYSQL_USER}
            - PMA_PASSWORD=${MYSQL_PASSWORD}
        ports:
            - ${PHPMYADMIN_PORT:-8080}:80
        depends_on:
            - mysql

    mongodb:
        restart: unless-stopped
        container_name: ${CONTAINER_PREFIX}_mongodb
        build:
            context: ./.docker/images/mongodb
            args:
                - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER}
                - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
                - MONGODB_DATABASE=${MONGODB_DATABASE}
                - MONGODB_USER=${MONGODB_USER}
                - MONGODB_PASSWORD=${MONGODB_PASSWORD}
        environment:
            - MONGO_INITDB_ROOT_USERNAME=${MONGODB_ROOT_USER}
            - MONGO_INITDB_ROOT_PASSWORD=${MONGODB_ROOT_PASSWORD}
            - MONGODB_DATABASE=${MONGODB_DATABASE}
            - MONGODB_USER=${MONGODB_USER}
            - MONGODB_PASSWORD=${MONGODB_PASSWORD}
        ports:
            - ${MONGODB_PORT:-27017}:27017
        volumes:
            - mongodb-data:/data/db

    nginx:
        restart: unless-stopped
        container_name: ${CONTAINER_PREFIX}_nginx
        working_dir: /var/www/
        build:
            context: ./.docker/images/nginx
            args:
                - APP_HOST=${APP_HOST}
                - NGINX_ENABLE_HTTPS=${NGINX_ENABLE_HTTPS}
        volumes:
            - ${APP_SRC}:/var/www/:cached
            - ./.docker/images/nginx/nginx.conf:/etc/nginx/nginx.conf
            - ./.docker/images/nginx/conf.d/:/etc/nginx/conf.d
        ports:
            - ${NGINX_PORT_80:-80}:80
            - ${NGINX_PORT_443:-443}:443
        depends_on:
            - php

    php:
        container_name: ${CONTAINER_PREFIX}_php
        working_dir: /var/www/
        expose:
            - 8000
        build:
            context: ./.docker/images/php
            args:
                - TIMEZONE=${TIMEZONE}
                - PHP_VERSION=${PHP_VERSION}
                - OCTANE_HTTPS=${OCTANE_HTTPS}
                - OCTANE_SERVER=${OCTANE_SERVER}
                - ENABLE_XDEBUG=${ENABLE_XDEBUG}
                - ENABLE_OPCACHE=${ENABLE_OPCACHE}
                - PHP_MAX_EXECUTION_TIME=${PHP_MAX_EXECUTION_TIME}
                - PHP_UPLOAD_MAX_FILESIZE=${PHP_UPLOAD_MAX_FILESIZE}
                - PHP_MEMORY_LIMIT=${PHP_MEMORY_LIMIT}
                - PHP_POST_MAX_SIZE=${PHP_POST_MAX_SIZE}
        volumes:
            - ${APP_SRC}:/var/www/:cached

    redis:
        restart: unless-stopped
        container_name: ${CONTAINER_PREFIX}_redis
        build:
            context: ./.docker/images/redis
        expose:
            - 6379
        ports:
            - ${REDIS_PORT:-6379}:6379

    mailhog:
        restart: unless-stopped
        container_name: ${CONTAINER_PREFIX}_mailhog
        build:
            context: ./.docker/images/mailhog
        expose:
            - "1025"
        ports:
            - ${MAILHOG_PORT:-8025}:8025

    echo-server:
        restart: unless-stopped
        container_name: ${CONTAINER_PREFIX}_echo-server
        build:
            context: ./.docker/images/echo-server
        ports:
            - 6001
        volumes:
            - ./.docker/images/echo-server/laravel-echo-server.json:/opt/laravellaravel-echo-server.json:ro
        depends_on:
            - redis

    node:
        working_dir: /var/www/
        container_name: ${CONTAINER_PREFIX}_node
        build:
            context: ./.docker/images/node
        volumes:
            - ${APP_SRC:-.}:/var/www:cached

volumes:
    sql-data: null
    mongodb-data: null
